<?xml version="1.0"?>

<!-- Ant buildfile for Colossus -->
<!-- $Id$ -->

<!-- To use this you need:
     Sun JDK 1.4+    http://java.sun.com  (currently recommend 1.4.2)
     Ant 1.5+        http://jakarta.apache.org/ant/
     Javamake 1.2.8+ http://www.experimentalstuff.com/Technologies/JavaMake/
        javamake.jar and javamake-ant15.jar need to be in your CLASSPATH.
        (Jars are included in the libs subdirectory.)
     JUnit 3.8.1+      http://junit.org
        (Jars are included in the libs subdirectory.)
     To sign jarfiles, you need a file called usernameKeystore,
        (substituting your username for "username")
        with an alias matching your username, and you need to put
        the password for this key in environment var JARPASSWORD.
        (Ant won't do keyboard password input.)
     To make a ChangeLog file from cvs history, you need cvs2cl.pl
        http://www.red-bean.com/cvs2cl/  You also need perl in the path.
        And you need to have ssh-agent set up so that you can do cvs
        commands over ssh without password prompts.
-->

<project name="Colossus" default="jar" basedir=".">

<property environment="env"/>



<target name="init"
        description="Initialization">

        <tstamp/>

        <!-- Set this to jikes or kjc to use those instead of javac -->
        <property name="build.compiler" value="modern"/>


        <property name="HTML_DIR" value="/home/groups/c/co/colossus/htdocs"/>
        <property name="DOWNLOAD_DIR" value="${HTML_DIR}/download"/>
        <property name="DOCS_DIR" value="${HTML_DIR}/docs"/>
        <property name="LIBS_DIR" value="${HTML_DIR}/libs"/>
        <property name="ZIPFILE" value="Colossus.${DSTAMP}.zip"/>
        <property name="SERVER" value="shell1.sf.net"/>

</target>


<target name="version" depends="init"
        description="Create a timestamp file">
        <echo file="./version" message="${DSTAMP}&#10;"
        />
</target>


<!-- Delete stale jar files before compiling -->
<target name="cleanjars" depends=""
        description = "Delete stale jar files">
        <delete verbose="yes" quiet = "yes" file = "Colossus.jar"/>
        <delete verbose="yes" quiet = "yes" file = "test/Colossus.jar"/>
        <delete verbose="yes" quiet = "yes" file = "BattlelandsBuilder.jar"/>
        <delete verbose="yes" quiet = "yes" file = "BattlelandsRandomizer.jar"/>
</target>


<taskdef name="javamake" classname="com.sun.tools.javamake.ant.JavaMake"/>

<target name="compile" depends="init"
        description = "Compile most .java files to .class files using javamake">
        <javamake debug="yes" deprecation="yes" target="1.4" srcdir="."
                includes="**/*.java"
                excludes="**/datatools/*.java">
            <classpath>
                <pathelement location="libs/junit.jar"/>
                <pathelement location="libs/werken.opt.jar"/>
                <pathelement location="libs/jdom.jar"/>
                <pathelement location="libs/batik-transcoder.jar"/>
                <pathelement location="libs/batik-util.jar"/>
            </classpath>
        </javamake>
</target>

<target name="compileAll" depends="init"
        description = "Compile all .java files to .class files using javamake">
        <javamake debug="yes" deprecation="yes" target="1.4" srcdir="."
                includes="**/*.java">
            <classpath>
                <pathelement location="libs/junit.jar"/>
                <pathelement location="libs/werken.opt.jar"/>
                <pathelement location="libs/jdom.jar"/>
                <pathelement location="libs/batik-transcoder.jar"/>
                <pathelement location="libs/batik-util.jar"/>
            </classpath>
        </javamake>
</target>


<!-- XXX Why does this fail if we set fork to yes? -->
<target name="test" depends="compile,jar"
        description = "Run all unit tests using JUnit">
        <junit printsummary="yes" fork="no" haltonfailure="no">
                <classpath>
                    <pathelement location="libs/junit.jar"/>
                    <pathelement location="libs/werken.opt.jar"/>
                    <pathelement location="libs/jdom.jar"/>
                    <pathelement location="libs/batik-transcoder.jar"/>
                    <pathelement location="libs/batik-util.jar"/>
                </classpath>
                <formatter type="plain"/>
                <test name="net.sf.colossus.server.DiceTest"/>
                <test name="net.sf.colossus.util.CombosTest"/>
                <test name="net.sf.colossus.client.PredictSplitsTest"/>
                <test name="net.sf.colossus.server.BalancedTowersTest"/>
                <test name="net.sf.colossus.server.CarryTest"/>
                <test name="net.sf.colossus.server.LOSTest"/>
        </junit>
</target>


<target name="javadoc" depends="compile"
        description = "Make javadoc files">
        <mkdir dir="javadoc"/>
        <javadoc sourcepath="." destdir="./javadoc" access="private"
                 packagenames="net.sf.colossus.*"
        />
</target>


<target name="jar" depends="init,compile,version"
        description = "Make jar file">
        <jar jarfile = "Colossus.jar" basedir="."
             manifest="META-INF/MANIFEST.MF"
             includes="**/*.class,
                       version,
                       Default/**,
                       Abyssal6/**,
                       Abyssal9/**,
                       TitanPlus/**,
                       ExtTitan/**,
                       Badlands/**,
                       Badlands-JDG/**,
                       Undead/**,
                       TG-SetII/**,
                       TG-SetIII/**,
                       TG-ConceptI/**,
                       TG-ConceptII/**,
                       TG-ConceptIII/**,
                       TG-Wild/**,
                       Outlands/**,
                       SmallTitan/**,
                       Unified/**,
                       Infinite/**,
                       Balrog/**,
                       Random/**"
             excludes="net/sf/colossus/datatools/*.class,
                       **/*Test.class"
             />
        <chmod file="Colossus.jar" perm="755"/>
</target>



<!-- Be very careful modifying this.  It whacks whole directories easily. -->
<target name="clean" depends="cleanjars"
        description = "Delete most derived files">
        <delete verbose="yes" quiet = "yes" includeemptydirs="yes"
                defaultexcludes="no">
                <fileset dir="."
                 includes =
                        "version,
                         log,
                         fixcrlf*,
                         **/core,
                         **/javacore.txt,
                         **/*~,
                         **/*.bak,
                         **/*.old,
                         **/*.class,
                         **/Colossus.*.zip,
                         TEST-*Test.txt,
                         javadoc/**"
                />
        </delete>
</target>


<target name="fullyclean" depends="clean"
        description = "Delete all derived files and savegames">
        <delete verbose="yes" quiet = "yes" includeemptydirs="yes">
                <fileset dir="."
                 includes =
                         "javamake.pdb"
                />
        </delete>
</target>


<target name="fix"
        description = "Fix end of line characters and eliminate tabs">
        <fixcrlf srcDir="." eol="lf" tab="remove" javafiles="yes"
                eof="remove" tablength="8"
                includes="**/*.java"
        />
</target>


<target name="run" depends="jar"
        description = "Run the game">
        <java jar="Colossus.jar"
              fork="yes"/>
</target>


<!-- Tools -->


<target name="tools" depends="bbjar,brjar"/>

<target name="bbjar" depends="init,compile,version"
        description = "Make Battlelands Builder jar file">
        <jar jarfile = "BattlelandsBuilder.jar" basedir="."
             manifest="META-INF/datatools/BattlelandsBuilder/MANIFEST.MF"
             includes="net/sf/colossus/datatools/*.class,
             net/sf/colossus/client/*.class,
             net/sf/colossus/parser/*.class,
             net/sf/colossus/server/*.class,
             net/sf/colossus/util/*.class,
             Default,
             TitanPlus,
             ExtTitan,
             Badlands,
             Undead,
             Outlands"
        />
        <chmod file="BattlelandsBuilder.jar" perm="755"/>
</target>

<target name="brjar" depends="init,compile,version"
        description = "Make Battlelands Randomizer jar file">
        <jar jarfile = "BattlelandsRandomizer.jar" basedir="."
             manifest="META-INF/datatools/BattlelandsRandomizer/MANIFEST.MF"
             includes="net/sf/colossus/datatools/*.class,
             net/sf/colossus/client/*.class,
             net/sf/colossus/parser/*.class,
             net/sf/colossus/server/*.class,
             net/sf/colossus/util/*.class,
             Default,
             TitanPlus,
             ExtTitan,
             Badlands,
             Undead,
             Outlands"
        />
        <chmod file="BattlelandsRandomizer.jar" perm="755"/>
</target>

<!-- TODO If a jar is already signed, don't sign it again. -->
<target name="sign" depends="jar"
        description = "Sign jar file">
        <signjar jar="Colossus.jar"
                 alias="${user.name}"
                 keystore="${user.name}Keystore"
                 storepass="${env.JARPASSWORD}"
        />
        <signjar jar="libs/jdom.jar"
                 alias="${user.name}"
                 keystore="${user.name}Keystore"
                 storepass="${env.JARPASSWORD}"
        />
        <signjar jar="libs/junit.jar"
                 alias="${user.name}"
                 keystore="${user.name}Keystore"
                 storepass="${env.JARPASSWORD}"
        />
        <signjar jar="libs/werken.opt.jar"
                 alias="${user.name}"
                 keystore="${user.name}Keystore"
                 storepass="${env.JARPASSWORD}"
        />
        <signjar jar="libs/batik-awt-util.jar"
                 alias="${user.name}"
                 keystore="${user.name}Keystore"
                 storepass="${env.JARPASSWORD}"
        />
        <signjar jar="libs/batik-bridge.jar"
                 alias="${user.name}"
                 keystore="${user.name}Keystore"
                 storepass="${env.JARPASSWORD}"
        />
        <signjar jar="libs/batik-css.jar"
                 alias="${user.name}"
                 keystore="${user.name}Keystore"
                 storepass="${env.JARPASSWORD}"
        />
        <signjar jar="libs/batik-dom.jar"
                 alias="${user.name}"
                 keystore="${user.name}Keystore"
                 storepass="${env.JARPASSWORD}"
        />
        <signjar jar="libs/batik-ext.jar"
                 alias="${user.name}"
                 keystore="${user.name}Keystore"
                 storepass="${env.JARPASSWORD}"
        />
        <signjar jar="libs/batik-gvt.jar"
                 alias="${user.name}"
                 keystore="${user.name}Keystore"
                 storepass="${env.JARPASSWORD}"
        />
        <signjar jar="libs/batik-parser.jar"
                 alias="${user.name}"
                 keystore="${user.name}Keystore"
                 storepass="${env.JARPASSWORD}"
        />
        <signjar jar="libs/batik-script.jar"
                 alias="${user.name}"
                 keystore="${user.name}Keystore"
                 storepass="${env.JARPASSWORD}"
        />
        <signjar jar="libs/batik-svg-dom.jar"
                 alias="${user.name}"
                 keystore="${user.name}Keystore"
                 storepass="${env.JARPASSWORD}"
        />
        <signjar jar="libs/batik-transcoder.jar"
                 alias="${user.name}"
                 keystore="${user.name}Keystore"
                 storepass="${env.JARPASSWORD}"
        />
        <signjar jar="libs/batik-util.jar"
                 alias="${user.name}"
                 keystore="${user.name}Keystore"
                 storepass="${env.JARPASSWORD}"
        />
        <signjar jar="libs/batik-xml.jar"
                 alias="${user.name}"
                 keystore="${user.name}Keystore"
                 storepass="${env.JARPASSWORD}"
        />
        <chmod file="Colossus.jar" perm="755"/>
        <copy file="Colossus.jar" todir="test"/>
</target>



<!-- Tasks from here down are only needed for installation on the web site. -->

<target name="changelog" depends=""
        description = "Create a ChangeLog file from cvs history">
        <exec executable="cvs2cl.pl" os="Linux,SunOS">
            <arg line="-S --no-wrap --utc"/>
        </exec>
        <delete verbose="yes" file = "ChangeLog.bak"/>
</target>

<target name="dist" depends="init,sign,changelog"
        description = "Make zip file for user download">
        <zip zipfile="${ZIPFILE}" basedir="."
             excludes="**/*.sav,
                 **/*.zip,
                 **/*.bak,
                 **/*javadoc*/*,
                 *Keystore*,
                 *cfg,
                 *properties*,
                 BattlelandsRandomizer.jar,
                 .*,
                 test/*.jar,
                 **/*.ps,
                 **/*.aux,
                 **/*.bbl,
                 **/*.bib,
                 **/*.blg,
                 **/*.log,
                 **/*.old"
        />
</target>


<target name="inst" depends="init,sign,dist,changelog"
        description = "Locally copy files into htdocs tree on SF">
        <copy file="Colossus.jar" todir="${HTML_DIR}"/>
        <copy file="Colossus.jnlp" todir="${HTML_DIR}"/>
        <move file="${ZIPFILE}" todir="${DOWNLOAD_DIR}"/>
        <copy file="ChangeLog" todir="${HTML_DIR}"/>
        <copy todir="${DOCS_DIR}"> <fileset dir="docs"/></copy>
        <delete>
                <fileset dir="${DOWNLOAD_DIR}" includes = "1_LATEST_IS_*"/>
        </delete>
        <touch file="${DOWNLOAD_DIR}/1_LATEST_IS_${DSTAMP}"/>
</target>

<!-- TODO Eliminate double maintenance -->
<!-- TODO Do not copy unchanged files -->
<!-- XXX libs/*.jar is not copied -->
<!-- This requires a good ssh-agent setup. -->
<target name="remote-inst" depends="init,sign,dist,changelog"
        description = "scp files into htdocs tree on SF">
        <exec executable="scp" os="Linux,SunOS">
            <arg line="Colossus.jar ${SERVER}:${HTML_DIR}"/>
        </exec>
        <exec executable="scp" os="Linux,SunOS">
            <arg line="Colossus.jnlp ${SERVER}:${HTML_DIR}"/>
        </exec>
        <exec executable="ssh" os="Linux,SunOS">
            <arg line="${SERVER} mkdir ${LIBS_DIR}"/>
        </exec>

        <exec executable="scp" os="Linux,SunOS">
            <arg line="ChangeLog ${SERVER}:${HTML_DIR}"/>
        </exec>
        <exec executable="scp" os="Linux,SunOS">
            <arg line="${ZIPFILE} ${SERVER}:${DOWNLOAD_DIR}"/>
        </exec>
        <exec executable="ssh" os="Linux,SunOS">
            <arg line="${SERVER} mkdir ${DOCS_DIR}"/>
        </exec>
        <exec executable="scp" os="Linux,SunOS">
            <arg line="-pr docs/ ${SERVER}:${HTML_DIR}"/>
        </exec>
        <delete>
                <fileset dir="${DOWNLOAD_DIR}" includes = "1_LATEST_IS_*"/>
        </delete>
        <exec executable="ssh" os="Linux,SunOS">
            <arg line="${SERVER} rm ${DOWNLOAD_DIR}/1_LATEST_IS_*"/>
        </exec>
        <touch file="${DOWNLOAD_DIR}/1_LATEST_IS_${DSTAMP}"/>
        <exec executable="scp" os="Linux,SunOS">
            <arg line="${DOWNLOAD_DIR}/1_LATEST_IS_${DSTAMP} ${SERVER}:${DOWNLOAD_DIR}"/>
        </exec>
</target>


</project>
