<?xml version="1.0"?>
<!-- Ant buildfile for Colossus -->
<!-- $Id$ -->
<!-- To use this you need:
     Sun JDK 1.5+    http://java.sun.com  (currently recommend 1.5.0)
     Ant 1.5+        http://jakarta.apache.org/ant/
     JUnit 3.8.1+      http://junit.org
        (Jars are included in the libs subdirectory.)
     To sign jarfiles, you need to have a file called usernameKeystore
        in the main Colossus directory (there where build.xml is;
          substituting your username for "username"),
        with an alias matching your username, and you need to put
        the password for this key in environment var JARPASSWORD.
        (Ant won't do keyboard password input.)
     To install a build on the website (normal public build, or one of
     the experimental builds, you need a proper rsync/ssh keys setup.
     Most noticable, you need the ssh public key setup done according SF's
     instructions, and put the right setup in your .ssh/config file.
     E.g. my (cleka's) file looks like this:
     ~~~clip~~~
     Host web.sourceforge.net
       User cleka,colossus
     ~~~clap~~~
-->
<project name="Colossus" default="jar" basedir=".">
  <property environment="env" />
  <property name="core.src.dir" value="core/src/main/java" />
  <property name="tests.src.dir" value="core/src/test/java" />
  <property name="core.resource.dir"
  value="core/src/main/resource" />
  <property name="libs.dir" value="libs" />
  <property name="variants.dir" value="variants" />
  <property name="build.dir" value="build/ant" />
  <property name="build.classes.dir"
  value="${build.dir}/classes" />
  <property name="testresults.dir"
  value="${build.dir}/testresults" />
  <property name="datatools.src.dir"
  value="datatools/src/main/java" />
  <property name="source.level" value="1.5" />
  <property name="target.level" value="1.5" />
  <path id="project.class.path">
    <pathelement path="${build.classes.dir}" />
    <pathelement path="${variants.dir}" />
    <fileset dir="${libs.dir}">
      <include name="**/*.jar" />
    </fileset>
    <fileset dir="${libs.dir}">
      <include name="**/*.zip" />
    </fileset>
  </path>
  <target name="init" description="Initialization">
    <tstamp />
    <!-- Set this to jikes or kjc to use those instead of javac -->
    <property name="build.compiler" value="modern" />
    <property name="HTML_DIR"
    value="/home/groups/c/co/colossus/htdocs" />
    <property name="DOWNLOAD_DIR" value="${HTML_DIR}/download" />
    <property name="DOCS_DIR" value="${HTML_DIR}/docs" />
    <property name="LIBS_DIR" value="${HTML_DIR}/libs" />
    <property name="ZIPFILE" value="Colossus.${DSTAMP}.zip" />
    <property name="SERVER" value="web.sourceforge.net" />
    <mkdir dir="${build.classes.dir}" />
    <mkdir dir="${testresults.dir}" />
  </target>
  <target name="version" depends="init"
  description="Create a timestamp file">
    <echo file="${build.classes.dir}/version"
    message="${DSTAMP}&#10;" />
  </target>
  <target name="compile" depends="init"
  description="Compiles Colossus without datatools and variants">
    <javac debug="yes" deprecation="yes" target="${target.level}"
    source="${source.level}" srcdir="${core.src.dir}"
    destdir="${build.classes.dir}">
      <classpath refid="project.class.path" />
    </javac>
  </target>
  <target name="compileVariants" depends="init"
  description="Compiles the variant code">
    <javac debug="yes" deprecation="yes" target="${target.level}"
    source="${source.level}" srcdir="${variants.dir}"
    destdir="${build.classes.dir}">
      <classpath refid="project.class.path" />
    </javac>
  </target>
  <target name="compileDatatools" depends="init"
  description="Compiles the datatools using javac">
    <javac debug="yes" deprecation="yes" target="${target.level}"
    source="${source.level}" srcdir="${datatools.src.dir}"
    destdir="${build.classes.dir}">
      <classpath refid="project.class.path" />
    </javac>
  </target>
  <target name="compileTests" depends="compile"
  description="Compiles the JUnit tests">
    <javac debug="yes" deprecation="yes" target="${target.level}"
    source="${source.level}" srcdir="${tests.src.dir}"
    destdir="${build.classes.dir}">
      <classpath refid="project.class.path" />
    </javac>
  </target>
  <target name="test" depends="compileTests,compileVariants"
  description="Run all unit tests using JUnit">
    <junit printsummary="yes" fork="no" haltonfailure="no"
    failureproperty="junit.testFailed"
    errorproperty="junit.testError">
      <classpath refid="project.class.path" />
      <formatter type="plain" />
      <batchtest todir="${testresults.dir}">
        <fileset dir="${tests.src.dir}" />
      </batchtest>
    </junit>
  </target>
  <target name="failOnBrokenTest"
  description="Fails the build if a previously run 'test' target has any failures or errors">

    <fail if="junit.testFailed"
    message="Failing build since a unit test failed" />
    <fail if="junit.testError"
    message="Failing build since a unit test returned an error" />
  </target>
  <target name="javadoc" depends="compile"
  description="Make javadoc files">
    <mkdir dir="javadoc" />
    <javadoc sourcepath="." destdir="./javadoc" access="private"
    packagenames="net.sf.colossus.*" />
  </target>
  <target name="jar" depends="init,compile,compileVariants,version"
  description="Make jar file">
    <pathconvert property="manifest.classpath" pathsep=" ">
      <path refid="project.class.path" />
      <chainedmapper>
        <flattenmapper />
        <globmapper from="*" to="libs/*" />
      </chainedmapper>
    </pathconvert>
    <jar jarfile="Colossus.jar" basedir="${build.classes.dir}"
    includes="**" excludes="**/webserver/**">
      <manifest>
        <attribute name="Main-Class"
        value="net.sf.colossus.server.Start" />
        <attribute name="Class-Path"
        value="${manifest.classpath}" />
      </manifest>
    </jar>
    <!-- add resources such as icons -->
    <jar jarfile="Colossus.jar" basedir="${core.resource.dir}"
    includes="**" update="true" />
    <!-- 
                        Add the resources from the variants by including the whole variants folder.
                        The variants should have a structure with java source and extra resources, too.
                        TODO: create that structure for all variants.
                -->
    <jar jarfile="Colossus.jar" basedir="${variants.dir}"
    includes="**" excludes="*.java" update="true" />
    <chmod file="Colossus.jar" perm="755" />
  </target>
  <target name="webjar" depends="init,compile,version"
  description="Make WebServer jar file">
    <jar jarfile="ColossusWeb.jar" basedir="${build.classes.dir}"
    includes="**/webcommon/**, **/webserver/**, **/util/Log.class, **/util/Options.class, **/client/IOptions.class, **/server/Constants.class">

      <manifest>
        <attribute name="Main-Class"
        value="net.sf.colossus.webserver.WebServer" />
        <attribute name="Class-Path"
        value="${manifest.classpath}" />
      </manifest>
    </jar>
    <chmod file="ColossusWeb.jar" perm="755" />
  </target>
  <!-- Delete stale jar files before compiling -->
  <target name="cleanjars" depends=""
  description="Delete stale jar files">
    <delete verbose="yes" quiet="yes" file="Colossus.jar" />
    <delete verbose="yes" quiet="yes" file="ColossusWeb.jar" />
    <delete verbose="yes" quiet="yes"
    file="BattlelandsBuilder.jar" />
    <delete verbose="yes" quiet="yes"
    file="BattlelandsRandomizer.jar" />
  </target>
  <!-- Be very careful modifying this.  It whacks whole directories easily. -->
  <target name="clean" depends="cleanjars"
  description="Delete derived files">
    <delete verbose="yes" quiet="yes" includeemptydirs="yes">
      <fileset dir="."
      includes="version, log, fixcrlf*, **/core, **/javacore.txt, **/*~, **/*.bak, **/*.old, **/*.class, **/Colossus.*.zip, TEST-*Test.txt, javadoc/**" />
    </delete>
    <delete dir="${build.dir}" />
  </target>
  <target name="fix"
  description="Fix end of line characters and eliminate tabs">
    <fixcrlf srcDir="." eol="lf" tab="remove" javafiles="yes"
    eof="remove" tablength="8" includes="**/*.java" />
    <fixcrlf srcDir="." eol="lf" tab="remove" javafiles="no"
    eof="remove" tablength="8"
    includes="**/*.xml, **/*.html, **/*.txt, **/*.py, **/*.pl" />
  </target>
  <target name="run" depends="jar" description="Run the game">
    <java jar="Colossus.jar" fork="yes" />
  </target>
  <!-- Tools -->
  <target name="tools" depends="bbjar,brjar" />
  <target name="bbjar" depends="init,compile,version"
  description="Make Battlelands Builder jar file">
    <jar jarfile="BattlelandsBuilder.jar" basedir="."
    includes="net/sf/colossus/datatools/*.class, net/sf/colossus/client/*.class, net/sf/colossus/parser/*.class, net/sf/colossus/server/*.class, net/sf/colossus/util/*.class, Default, TitanPlus, ExtTitan, Badlands, Undead, Outlands">

      <manifest>
        <attribute name="Main-Class"
        value="net/sf/colossus/datatools/BattlelandsBuilder" />
      </manifest>
    </jar>
    <chmod file="BattlelandsBuilder.jar" perm="755" />
  </target>
  <target name="brjar" depends="init,compile,version"
  description="Make Battlelands Randomizer jar file">
    <jar jarfile="BattlelandsRandomizer.jar" basedir="."
    includes="net/sf/colossus/datatools/*.class, net/sf/colossus/client/*.class, net/sf/colossus/parser/*.class, net/sf/colossus/server/*.class, net/sf/colossus/util/*.class, Default, TitanPlus, ExtTitan, Badlands, Undead, Outlands">

      <manifest>
        <attribute name="Main-Class"
        value="net/sf/colossus/datatools/BattlelandsRandomizer" />
      </manifest>
    </jar>
    <chmod file="BattlelandsRandomizer.jar" perm="755" />
  </target>
  <target name="sign" depends="jar"
  description="Sign main jar file">
    <signjar jar="Colossus.jar" alias="${user.name}"
    keystore="${user.name}Keystore"
    storepass="${env.JARPASSWORD}" />
    <chmod file="Colossus.jar" perm="755" />
  </target>
  <target name="signall" depends="jar, sign"
  description="Sign all jar files">
    <signjar jar="libs/jdom.jar" alias="${user.name}"
    keystore="${user.name}Keystore"
    storepass="${env.JARPASSWORD}" />
    <signjar jar="libs/junit.jar" alias="${user.name}"
    keystore="${user.name}Keystore"
    storepass="${env.JARPASSWORD}" />
    <signjar jar="libs/werken.opt.jar" alias="${user.name}"
    keystore="${user.name}Keystore"
    storepass="${env.JARPASSWORD}" />
  </target>
  <!-- Tasks from here down are only needed for installation on the web site. -->
  <target name="dist" depends="clean,init,sign"
  description="Make zip file for user download">
    <zip zipfile="${ZIPFILE}" basedir="."
    excludes="**/*.sav, **/*.zip, **/*.bak, **/*javadoc*/*, *Keystore*, *cfg, *properties*, BattlelandsRandomizer.jar, .*, **/*.ps, **/*.aux, **/*.bbl, **/*.bib, **/*.blg, **/*.log, **/*.old" />
  </target>
  <target name="inst" depends="clean,init,sign,dist"
  description="Locally copy files into htdocs tree on SF">
    <copy file="Colossus.jar" todir="${HTML_DIR}" />
    <copy file="Colossus.jnlp" todir="${HTML_DIR}" />
    <move file="${ZIPFILE}" todir="${DOWNLOAD_DIR}" />
    <copy todir="${DOCS_DIR}">
      <fileset dir="docs" />
    </copy>
    <copy todir="${LIBS_DIR}">
      <fileset dir="libs" />
    </copy>
  </target>
  <!-- TODO Eliminate double maintenance -->
  <!-- This requires rsync and a good ssh-agent setup. -->
  <!-- Official public build -->
  <target name="remote-inst" depends="clean,init,sign,dist"
  description="copy files into htdocs tree on SF">
    <exec executable="rsync">
      <arg line="-a Colossus.jar ${SERVER}:${HTML_DIR}" />
    </exec>
    <exec executable="rsync">
      <arg line="-a Colossus.jnlp ${SERVER}:${HTML_DIR}" />
    </exec>
    <exec executable="rsync">
      <arg line="-a libs ${SERVER}:${HTML_DIR}" />
    </exec>
    <exec executable="rsync">
      <arg line="-a ${ZIPFILE} ${SERVER}:${DOWNLOAD_DIR}" />
    </exec>
    <exec executable="rsync">
      <arg line="-a docs ${SERVER}:${HTML_DIR}" />
    </exec>
  </target>
  <!-- If we can agree to put the public build files also to a subdir, and use the following
         three targets for that, then those three targets could even be unified to use
         one target that does all the rsync and 3 special ones that just set the variables.
         Perhaps we could even just rsync whole ./htdocs/BUILD/ directory...
         Clemens, 22.9.2008
      -->
  <!-- next one: NOT TESTED YET !!! -->
  <!--  public-build ("Official" public build) -->
  <target name="remote-inst-public-build"
  depends="clean,init,signall"
  description="copy files into public-build -directory under htdocs tree on SF">

    <exec executable="rsync">
      <arg line="-a --chmod=ug=rw,o=r htdocs/public-build/Colossus.jnlp ${SERVER}:${HTML_DIR}/public-build/Colossus.jnlp" />
    </exec>
    <exec executable="rsync">
      <arg line="-a --chmod=ug=rw,o=r Colossus.jar ${SERVER}:${HTML_DIR}/public-build/Colossus.jar" />
    </exec>
    <exec executable="rsync">
      <arg line="-a --chmod=ug=rw,o=r libs/werken.opt.jar ${SERVER}:${HTML_DIR}/public-build/libs/werken.opt.jar" />
    </exec>
    <exec executable="rsync">
      <arg line="-a --chmod=ug=rw,o=r libs/jdom.jar ${SERVER}:${HTML_DIR}/public-build/libs/jdom.jar" />
    </exec>
    <exec executable="rsync">
      <arg line="-a --chmod=ug=rw,o=r docs/* ${SERVER}:${HTML_DIR}/public-build/docs/" />
    </exec>
    <!--- TODO how to do this for the two other builds, or do at all? 
                   Or use the download feature on SF site instead? -->
    <!--                       
        <exec executable="rsync">
                <arg line="-a ${ZIPFILE} ${SERVER}:${DOWNLOAD_DIR}" />
        </exec>
-->
  </target>
  <!--  public-testing (Public testing build, usually from trunk-head.) -->
  <target name="remote-inst-public-testing"
  depends="clean,init,signall"
  description="copy files into public-testing -directory under htdocs tree on SF">

    <exec executable="rsync">
      <arg line="-a --chmod=ug=rw,o=r htdocs/public-testing/Colossus-public-testing.jnlp ${SERVER}:${HTML_DIR}/public-testing/Colossus-public-testing.jnlp" />
    </exec>
    <exec executable="rsync">
      <arg line="-a --chmod=ug=rw,o=r Colossus.jar ${SERVER}:${HTML_DIR}/public-testing/Colossus.jar" />
    </exec>
    <exec executable="rsync">
      <arg line="-a --chmod=ug=rw,o=r libs/werken.opt.jar ${SERVER}:${HTML_DIR}/public-testing/libs/werken.opt.jar" />
    </exec>
    <exec executable="rsync">
      <arg line="-a --chmod=ug=rw,o=r libs/jdom.jar ${SERVER}:${HTML_DIR}/public-testing/libs/jdom.jar" />
    </exec>
    <exec executable="rsync">
      <arg line="-a --chmod=ug=rw,o=r docs/* ${SERVER}:${HTML_DIR}/public-testing/docs/" />
    </exec>
  </target>
  <!--  special-build (testing copy to play around e.g. with the rsync stuff 
          or make a special build for someone to troubleshoot a
          "happens-only-for-user-but-not-developer-" type of bug.
      -->
  <target name="remote-inst-special-build"
  depends="clean,init,signall"
  description="copy files into special-build -directory under htdocs tree on SF">

    <exec executable="rsync">
      <arg line="-a --chmod=ug=rw,o=r htdocs/special-build/Colossus-special-build.jnlp ${SERVER}:${HTML_DIR}/special-build/Colossus-special-build.jnlp" />
    </exec>
    <exec executable="rsync">
      <arg line="-a --chmod=ug=rw,o=r Colossus.jar ${SERVER}:${HTML_DIR}/special-build/Colossus.jar" />
    </exec>
    <exec executable="rsync">
      <arg line="-a --chmod=ug=rw,o=r libs/werken.opt.jar ${SERVER}:${HTML_DIR}/special-build/libs/werken.opt.jar" />
    </exec>
    <exec executable="rsync">
      <arg line="-a --chmod=ug=rw,o=r libs/jdom.jar ${SERVER}:${HTML_DIR}/special-build/libs/jdom.jar" />
    </exec>
    <exec executable="rsync">
      <arg line="-a --chmod=ug=rw,o=r docs/* ${SERVER}:${HTML_DIR}/special-build/docs/" />
    </exec>
  </target>

  <target name="remote-inst-web"
  depends="clean,init,signall"
  description="copy web page files into top htdocs dir on SF">
    <exec executable="rsync">
      <arg line="-a htdocs ${SERVER}:${HTML_DIR}" />
    </exec>
  </target>
</project>
