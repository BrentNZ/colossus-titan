/* Generated By:JavaCC: Do not edit this line. BattlelandLoader.java */
import java.util.*;

public class BattlelandLoader implements BattlelandLoaderConstants {
        class hexSide {
                int pos;
                char type;
                hexSide(int p, char t) { pos = p; type = t; }
        }

  final public int b_number() throws ParseException {
    jj_consume_token(NUMBER);
        {if (true) return(Integer.parseInt(token.image));}
    throw new Error("Missing return statement in function");
  }

  final public char b_terrain() throws ParseException {
    jj_consume_token(TERRAIN);
        {if (true) return(token.image.charAt(0));}
    throw new Error("Missing return statement in function");
  }

  final public hexSide b_hexSide() throws ParseException {
    int p;
    char t;
    p = b_number();
    t = b_terrain();
        {if (true) return new hexSide(p, t );}
    throw new Error("Missing return statement in function");
  }

  final public ArrayList b_allHexSide() throws ParseException {
    ArrayList temp;
    hexSide hs;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case NUMBER:
      hs = b_hexSide();
      temp = b_allHexSide();
      temp.add(0, hs); {if (true) return temp;}
      break;
    default:
      jj_la1[0] = jj_gen;
      {if (true) return new ArrayList();}
    }
    throw new Error("Missing return statement in function");
  }

  final public int oneBattlelandCase(BattleHex [][] h) throws ParseException {
    int x,y,e;
    char t;
    ArrayList hsl;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case NUMBER:
      x = b_number();
      y = b_number();
      t = b_terrain();
      e = b_number();
      hsl = b_allHexSide();
      jj_consume_token(EOL);
        h[x][y].setTerrain(t);
        h[x][y].setElevation(e);
        for (int i = 0; i < hsl.size() ; i++)
        {
            hexSide hs = (hexSide)hsl.get(i);
            h[x][y].setHexside(hs.pos, hs.type);
        }
        {if (true) return(1);}
      break;
    case EOL:
      jj_consume_token(EOL);
        {if (true) return(0);}
      break;
    case 0:
      jj_consume_token(0);
        {if (true) return(-1);}
      break;
    default:
      jj_la1[1] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

  public BattlelandLoaderTokenManager token_source;
  SimpleCharStream jj_input_stream;
  public Token token, jj_nt;
  private int jj_ntk;
  private int jj_gen;
  final private int[] jj_la1 = new int[2];
  final private int[] jj_la1_0 = {0x20,0x31,};

  public BattlelandLoader(java.io.InputStream stream) {
    jj_input_stream = new SimpleCharStream(stream, 1, 1);
    token_source = new BattlelandLoaderTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 2; i++) jj_la1[i] = -1;
  }

  public void ReInit(java.io.InputStream stream) {
    jj_input_stream.ReInit(stream, 1, 1);
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 2; i++) jj_la1[i] = -1;
  }

  public BattlelandLoader(java.io.Reader stream) {
    jj_input_stream = new SimpleCharStream(stream, 1, 1);
    token_source = new BattlelandLoaderTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 2; i++) jj_la1[i] = -1;
  }

  public void ReInit(java.io.Reader stream) {
    jj_input_stream.ReInit(stream, 1, 1);
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 2; i++) jj_la1[i] = -1;
  }

  public BattlelandLoader(BattlelandLoaderTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 2; i++) jj_la1[i] = -1;
  }

  public void ReInit(BattlelandLoaderTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 2; i++) jj_la1[i] = -1;
  }

  final private Token jj_consume_token(int kind) throws ParseException {
    Token oldToken;
    if ((oldToken = token).next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    if (token.kind == kind) {
      jj_gen++;
      return token;
    }
    token = oldToken;
    jj_kind = kind;
    throw generateParseException();
  }

  final public Token getNextToken() {
    if (token.next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    jj_gen++;
    return token;
  }

  final public Token getToken(int index) {
    Token t = token;
    for (int i = 0; i < index; i++) {
      if (t.next != null) t = t.next;
      else t = t.next = token_source.getNextToken();
    }
    return t;
  }

  final private int jj_ntk() {
    if ((jj_nt=token.next) == null)
      return (jj_ntk = (token.next=token_source.getNextToken()).kind);
    else
      return (jj_ntk = jj_nt.kind);
  }

  private java.util.Vector jj_expentries = new java.util.Vector();
  private int[] jj_expentry;
  private int jj_kind = -1;

  final public ParseException generateParseException() {
    jj_expentries.removeAllElements();
    boolean[] la1tokens = new boolean[8];
    for (int i = 0; i < 8; i++) {
      la1tokens[i] = false;
    }
    if (jj_kind >= 0) {
      la1tokens[jj_kind] = true;
      jj_kind = -1;
    }
    for (int i = 0; i < 2; i++) {
      if (jj_la1[i] == jj_gen) {
        for (int j = 0; j < 32; j++) {
          if ((jj_la1_0[i] & (1<<j)) != 0) {
            la1tokens[j] = true;
          }
        }
      }
    }
    for (int i = 0; i < 8; i++) {
      if (la1tokens[i]) {
        jj_expentry = new int[1];
        jj_expentry[0] = i;
        jj_expentries.addElement(jj_expentry);
      }
    }
    int[][] exptokseq = new int[jj_expentries.size()][];
    for (int i = 0; i < jj_expentries.size(); i++) {
      exptokseq[i] = (int[])jj_expentries.elementAt(i);
    }
    return new ParseException(token, exptokseq, tokenImage);
  }

  final public void enable_tracing() {
  }

  final public void disable_tracing() {
  }

}
