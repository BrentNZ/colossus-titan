/* Generated By:JavaCC: Do not edit this line. StrategicMapLoader.java */
import java.util.*;

public class StrategicMapLoader implements StrategicMapLoaderConstants {
    static Hashtable stringToWay;

    public void StrategicMapLoaderInit()
    {
        stringToWay = new Hashtable(4);
        stringToWay.put("ARROW", new Integer(MasterHex.ARROW));
        stringToWay.put("ARROWS",  new Integer(MasterHex.ARROWS));
        stringToWay.put("ARCH",  new Integer(MasterHex.ARCH));
        stringToWay.put("BLOCK", new Integer(MasterHex.BLOCK));
    }

  final public char c_terrain() throws ParseException {
    jj_consume_token(TERRAIN);
        {if (true) return(token.image.charAt(0));}
    throw new Error("Missing return statement in function");
  }

  final public int c_number() throws ParseException {
    jj_consume_token(NUMBER);
        {if (true) return(Integer.parseInt(token.image));}
    throw new Error("Missing return statement in function");
  }

  final public int c_way() throws ParseException {
    jj_consume_token(WAY);
        {if (true) return(((Integer)stringToWay.get(token.image)).intValue());}
    throw new Error("Missing return statement in function");
  }

  final public int oneCase(MasterHex [][] h) throws ParseException {
    char ter;
    int p;
    int s1;
    int s2;
    int s3;
    int ts1;
    int ts2;
    int ts3;
    int posX;
    int posY;
    int nPosX;
    int nPosY;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case NUMBER:
      p = c_number();
      ter = c_terrain();
      s1 = c_number();
      ts1 = c_way();
      s2 = c_number();
      ts2 = c_way();
      s3 = c_number();
      ts3 = c_way();
      posX = c_number();
      posY = c_number();
      jj_consume_token(EOL);
        //nPosX = posX-1;
        //nPosY = (posY-1)/2;
        Log.debug("Adding case #" + p + " @(" + posX + "," + posY +
            "), type " + Game.getTerrainName(ter) + " with exit : " + s1 + ", " + s2 + ", " + s3);
        h[posX][posY].setTerrain(ter);
        h[posX][posY].setLabel(p);
        h[posX][posY].setXCoord(posX);
        h[posX][posY].setYCoord(posY);
        if (s1 > 0)
        {
            h[posX][posY].setBaseExitType(0, ts1);
        }
        else
        {
            h[posX][posY].setBaseExitType(0, MasterHex.NONE);
        }
        h[posX][posY].setBaseExitLabel(0, s1);
        if (s2 > 0)
        {
            h[posX][posY].setBaseExitType(1, ts2);
        }
        else
        {
            h[posX][posY].setBaseExitType(1, MasterHex.NONE);
        }
        h[posX][posY].setBaseExitLabel(1, s2);
        if (s3 > 0)
        {
            h[posX][posY].setBaseExitType(2, ts3);
        }
        else
        {
            h[posX][posY].setBaseExitType(2, MasterHex.NONE);
        }
        h[posX][posY].setBaseExitLabel(2, s3);
        {if (true) return(1);}
      break;
    case EOL:
      jj_consume_token(EOL);
                {if (true) return(0);}
      break;
    case 0:
      jj_consume_token(0);
                {if (true) return(-1);}
      break;
    default:
      jj_la1[0] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

  public StrategicMapLoaderTokenManager token_source;
  SimpleCharStream jj_input_stream;
  public Token token, jj_nt;
  private int jj_ntk;
  private int jj_gen;
  final private int[] jj_la1 = new int[1];
  final private int[] jj_la1_0 = {0x31,};

  public StrategicMapLoader(java.io.InputStream stream) {
    jj_input_stream = new SimpleCharStream(stream, 1, 1);
    token_source = new StrategicMapLoaderTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 1; i++) jj_la1[i] = -1;
  }

  public void ReInit(java.io.InputStream stream) {
    jj_input_stream.ReInit(stream, 1, 1);
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 1; i++) jj_la1[i] = -1;
  }

  public StrategicMapLoader(java.io.Reader stream) {
    jj_input_stream = new SimpleCharStream(stream, 1, 1);
    token_source = new StrategicMapLoaderTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 1; i++) jj_la1[i] = -1;
  }

  public void ReInit(java.io.Reader stream) {
    jj_input_stream.ReInit(stream, 1, 1);
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 1; i++) jj_la1[i] = -1;
  }

  public StrategicMapLoader(StrategicMapLoaderTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 1; i++) jj_la1[i] = -1;
  }

  public void ReInit(StrategicMapLoaderTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 1; i++) jj_la1[i] = -1;
  }

  final private Token jj_consume_token(int kind) throws ParseException {
    Token oldToken;
    if ((oldToken = token).next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    if (token.kind == kind) {
      jj_gen++;
      return token;
    }
    token = oldToken;
    jj_kind = kind;
    throw generateParseException();
  }

  final public Token getNextToken() {
    if (token.next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    jj_gen++;
    return token;
  }

  final public Token getToken(int index) {
    Token t = token;
    for (int i = 0; i < index; i++) {
      if (t.next != null) t = t.next;
      else t = t.next = token_source.getNextToken();
    }
    return t;
  }

  final private int jj_ntk() {
    if ((jj_nt=token.next) == null)
      return (jj_ntk = (token.next=token_source.getNextToken()).kind);
    else
      return (jj_ntk = jj_nt.kind);
  }

  private java.util.Vector jj_expentries = new java.util.Vector();
  private int[] jj_expentry;
  private int jj_kind = -1;

  final public ParseException generateParseException() {
    jj_expentries.removeAllElements();
    boolean[] la1tokens = new boolean[9];
    for (int i = 0; i < 9; i++) {
      la1tokens[i] = false;
    }
    if (jj_kind >= 0) {
      la1tokens[jj_kind] = true;
      jj_kind = -1;
    }
    for (int i = 0; i < 1; i++) {
      if (jj_la1[i] == jj_gen) {
        for (int j = 0; j < 32; j++) {
          if ((jj_la1_0[i] & (1<<j)) != 0) {
            la1tokens[j] = true;
          }
        }
      }
    }
    for (int i = 0; i < 9; i++) {
      if (la1tokens[i]) {
        jj_expentry = new int[1];
        jj_expentry[0] = i;
        jj_expentries.addElement(jj_expentry);
      }
    }
    int[][] exptokseq = new int[jj_expentries.size()][];
    for (int i = 0; i < jj_expentries.size(); i++) {
      exptokseq[i] = (int[])jj_expentries.elementAt(i);
    }
    return new ParseException(token, exptokseq, tokenImage);
  }

  final public void enable_tracing() {
  }

  final public void disable_tracing() {
  }

}
