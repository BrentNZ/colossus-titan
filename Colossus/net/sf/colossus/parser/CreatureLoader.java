/* Generated By:JavaCC: Do not edit this line. CreatureLoader.java */
package net.sf.colossus.parser;


import java.util.*;

import net.sf.colossus.server.Creature;

/**
 * CreatureLoader the creatures descriptions.
 * @author Romain Dolbeau
 * @version $Id$
 * @see net.sf.colossus.server.Creature
 */
public class CreatureLoader implements CreatureLoaderConstants {

  final public boolean c_bool() throws ParseException {
    jj_consume_token(BOOL);
      if (token.image.equals("true")) {if (true) return true;} else {if (true) return false;}
    throw new Error("Missing return statement in function");
  }

  final public String c_chaine() throws ParseException {
    jj_consume_token(CHAINE);
        {if (true) return(new String(token.image));}
    throw new Error("Missing return statement in function");
  }

  final public int c_number() throws ParseException {
    jj_consume_token(NUMBER);
        {if (true) return(Integer.parseInt(token.image));}
    throw new Error("Missing return statement in function");
  }

/**
 * Add one creature to the list of creature.
 * @param lc List of creatures.
 * @return Status of the parser ; negative at the end of file, positive on success, null on blank line.
 * @see net.sf.colossus.server.Creature
 */
  final public int oneCreature(List lc) throws ParseException {
    String name;
    String pluralName;
    int power;
    int skill;
    boolean rangestrikes;
    boolean flies;
    boolean nativeBramble;
    boolean nativeDrift;
    boolean nativeBog;
    boolean nativeSandDune;
    boolean nativeSlope;
    boolean lord;
    boolean demilord;
    int maxCount;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case CHAINE:
      name = c_chaine();
      power = c_number();
      skill = c_number();
      rangestrikes = c_bool();
      flies = c_bool();
      nativeBramble = c_bool();
      nativeDrift = c_bool();
      nativeBog = c_bool();
      nativeSandDune = c_bool();
      nativeSlope = c_bool();
      lord = c_bool();
      demilord = c_bool();
      maxCount = c_number();
      pluralName = c_chaine();
      jj_consume_token(EOL);
        lc.add(new Creature(name, power, skill, rangestrikes,
                              flies, nativeBramble, nativeDrift,
                              nativeBog, nativeSandDune, nativeSlope,
                              lord, demilord, maxCount, pluralName));
        System.out.println(name + " is a " + power + " " + skill);
        {if (true) return 1;}
      break;
    case EOL:
      jj_consume_token(EOL);
        {if (true) return(0);}
      break;
    case 0:
      jj_consume_token(0);
        {if (true) return(-1);}
      break;
    default:
      jj_la1[0] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

  public CreatureLoaderTokenManager token_source;
  SimpleCharStream jj_input_stream;
  public Token token, jj_nt;
  private int jj_ntk;
  private int jj_gen;
  final private int[] jj_la1 = new int[1];
  final private int[] jj_la1_0 = {0x111,};

  public CreatureLoader(java.io.InputStream stream) {
    jj_input_stream = new SimpleCharStream(stream, 1, 1);
    token_source = new CreatureLoaderTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 1; i++) jj_la1[i] = -1;
  }

  public void ReInit(java.io.InputStream stream) {
    jj_input_stream.ReInit(stream, 1, 1);
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 1; i++) jj_la1[i] = -1;
  }

  public CreatureLoader(java.io.Reader stream) {
    jj_input_stream = new SimpleCharStream(stream, 1, 1);
    token_source = new CreatureLoaderTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 1; i++) jj_la1[i] = -1;
  }

  public void ReInit(java.io.Reader stream) {
    jj_input_stream.ReInit(stream, 1, 1);
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 1; i++) jj_la1[i] = -1;
  }

  public CreatureLoader(CreatureLoaderTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 1; i++) jj_la1[i] = -1;
  }

  public void ReInit(CreatureLoaderTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 1; i++) jj_la1[i] = -1;
  }

  final private Token jj_consume_token(int kind) throws ParseException {
    Token oldToken;
    if ((oldToken = token).next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    if (token.kind == kind) {
      jj_gen++;
      return token;
    }
    token = oldToken;
    jj_kind = kind;
    throw generateParseException();
  }

  final public Token getNextToken() {
    if (token.next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    jj_gen++;
    return token;
  }

  final public Token getToken(int index) {
    Token t = token;
    for (int i = 0; i < index; i++) {
      if (t.next != null) t = t.next;
      else t = t.next = token_source.getNextToken();
    }
    return t;
  }

  final private int jj_ntk() {
    if ((jj_nt=token.next) == null)
      return (jj_ntk = (token.next=token_source.getNextToken()).kind);
    else
      return (jj_ntk = jj_nt.kind);
  }

  private java.util.Vector jj_expentries = new java.util.Vector();
  private int[] jj_expentry;
  private int jj_kind = -1;

  final public ParseException generateParseException() {
    jj_expentries.removeAllElements();
    boolean[] la1tokens = new boolean[10];
    for (int i = 0; i < 10; i++) {
      la1tokens[i] = false;
    }
    if (jj_kind >= 0) {
      la1tokens[jj_kind] = true;
      jj_kind = -1;
    }
    for (int i = 0; i < 1; i++) {
      if (jj_la1[i] == jj_gen) {
        for (int j = 0; j < 32; j++) {
          if ((jj_la1_0[i] & (1<<j)) != 0) {
            la1tokens[j] = true;
          }
        }
      }
    }
    for (int i = 0; i < 10; i++) {
      if (la1tokens[i]) {
        jj_expentry = new int[1];
        jj_expentry[0] = i;
        jj_expentries.addElement(jj_expentry);
      }
    }
    int[][] exptokseq = new int[jj_expentries.size()][];
    for (int i = 0; i < jj_expentries.size(); i++) {
      exptokseq[i] = (int[])jj_expentries.elementAt(i);
    }
    return new ParseException(token, exptokseq, tokenImage);
  }

  final public void enable_tracing() {
  }

  final public void disable_tracing() {
  }

}
