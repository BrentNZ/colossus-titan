options
{
  IGNORE_CASE = false;
  STATIC = false;
  LOOKAHEAD = 8;
  FORCE_LA_CHECK = true;
}


PARSER_BEGIN(BattlelandRandomizerLoader)
package net.sf.colossus.parser;

import java.util.*;

import net.sf.colossus.util.Log;
import net.sf.colossus.client.BattleHex;

/**
 * BattlelandRandomizerLoader create a randomized Battleland from a description file.
 * @author Romain Dolbeau
 * @version $Id$
 * @see net.sf.colossus.client.BattleHex
 */
public class BattlelandRandomizerLoader
{
    private static final boolean[][] show =
    {
        {false,false,true,true,true,false},
        {false,true,true,true,true,false},
        {false,true,true,true,true,true},
        {true,true,true,true,true,true},
        {false,true,true,true,true,true},
        {false,true,true,true,true,false}
    };
    private static final Random rand = new Random();

    private List leftover;
    private List usedup;

    BattleHex[][] hexes;

    Hashtable labels = new Hashtable();

    /* code executed just before the constructor call */
    /* used to add the predefined labels to the Hashtable */
    {
        int i,j;
        List al;

        al = new ArrayList();
        
        for (i = 1; i <= 4 ; i++)
            for (j = 2; j <= 3 ; j++)
                al.add(new address(i,j));
        al.add(new address(3,1));
        for (i = 2; i <= 4 ; i++)
            al.add(new address(i,4));
        labels.put("inside", al);

        al = new ArrayList();

        for (i = 2; i <= 4 ; i++)
            al.add(new address(0,i));
        labels.put("leftdefenseentry", al);

        al = new ArrayList();

        al.add(new address(3,0));
        for (i = 4; i <= 5 ; i++)
            al.add(new address(i,1));
        labels.put("upperdefenseentry", al);
        
        al = new ArrayList();

        al.add(new address(5,4));
        for (i = 3; i <= 4 ; i++)
            al.add(new address(i,5));
        labels.put("lowerdefenseentry", al);

        al = new ArrayList();

        for (i = 1; i < 6 ; i++)
            for (j = 1; j < 6 ; j++)
                if (show[i][j])
                    al.add(new address(i,j));
        labels.put("anywhere", al);
    }

    private class randomHazard implements Comparable
    {
        private final char terrain;
        private final double prob;
        private final double[] e_prob = new double[3];

        private double percent(double val)
        {
            if (val < 0.)
                return 0.;
            if (val > 100.)
                return 100.;
            return val;
        }
        private double percent(double val, double sum)
        {
            return ((val * 100.) / sum);
        }
        randomHazard(char t)
        {
            terrain = t;
            prob = 100.;
            e_prob[0] = 100.;
            e_prob[1] = 0.;
            e_prob[2] = 0.;
        }
        randomHazard(char t, double p, int e)
        {
            terrain = t;
            prob = percent(p);
            e_prob[0] = 0.;
            e_prob[1] = 0.;
            e_prob[2] = 0.;
            if ((e < 1) || (e > 2))
                e_prob[0] = 100.;
            else
                e_prob[e] = 100.;
        }
        randomHazard(char t, double p, double p1, double p2, double p3)
        {
            double sum = percent(p1)+percent(p2)+percent(p3);
            terrain = t;
            prob = percent(p);
            e_prob[0] = percent(p1,sum);
            e_prob[1] = percent(p2,sum);
            e_prob[2] = percent(p3,sum);
        }
        public String toString()
        {
            String s =  "Hazard '" + terrain + "'";
            if (prob < 100.)
                s = s + " (" + prob + "%)";
            s = s + " [" + e_prob[0] + "/" + e_prob[1] + "/" + e_prob[2] + "]";
            return s;
        }
        public int compareTo(Object o)
        {
            randomHazard other = (randomHazard)o;
            if (other.prob != prob)
            {
                return (prob > other.prob ? -1 : 1);
            }
            return 0;
        }
    }
    private class address implements Comparable
    {
        final int x;
        final int y;
        address(int ox, int oy)
        {
            x = ox; y = oy;
        }
        public String toString()
        {
            return "(" + x + "," + y + ")";
        }
        public int compareTo(Object o)
        {
            address other = (address)o;
            if (other.x != x)
            {
                return (x < other.x ? -1 : 1);
            }
            if (other.y != y)
            {
                return (y < other.y ? -1 : 1);
            }
            return 0;
        }
        public boolean equals(Object o)
        {
            if (o == null)
                return false;
            if (!(o instanceof address))
                return false;
            address ot = (address)o;
            return ((x == ot.x) && (y == ot.y));
        }
    }
    private boolean exist(address a)
    {
        return (a.x >= 0) && (a.x < show.length) &&
               (a.y >= 0) && (a.y < show[0].length) &&
               (show[a.x][a.y]);
    }
    private class range
    {
        final int min;
        final int max;
        range(int mi, int ma)
        {
            min = mi; max = ma;
        }
    }
    private void resolveOne(BattleHex[][] h, List al, randomHazard t)
    {
        if (al.isEmpty())
            return;
        double result = rand.nextDouble() * 100.;
        if (result >= t.prob)
            return;
        int pos = rand.nextInt(al.size());
        address a = (address)al.remove(pos);
        BattleHex hex = h[a.x][a.y];
        hex.setTerrain(t.terrain);
        result = rand.nextDouble() * 100.;
        hex.setElevation(0);
        if (result > t.e_prob[0])
            hex.setElevation(1);
        if (result > (t.e_prob[0] + t.e_prob[1]))
            hex.setElevation(2);
        usedup.add(a);
    }
    private void resolveAll(BattleHex[][] h, List al, List tl)
    {
        usedup = new ArrayList();
        Iterator it = tl.iterator();
        while (it.hasNext())
        {
            randomHazard rt = (randomHazard)it.next();
            resolveOne(h, al, rt);
        }
        leftover = al;
    }

    private Map hexsideRandomness = new TreeMap();
    private class hazardPair implements Comparable
    {
        final char hs;
        final int  es;
        final char hd;
        final int  ed;
        private hazardPair(char hs, int es, char hd, int ed)
        {
            this.hs = hs;
            this.es = es;
            this.hd = hd;
            this.ed = ed;
        }
        public boolean equals(Object o)
        {
            if (o == null)
                return false;
            if (!(o instanceof hazardPair))
                return false;
            hazardPair h = (hazardPair)o;
            return ((hs == h.hs) &&
                    (hd == h.hd) &&
                    (es == h.es) &&
                    (ed == h.ed));
        }
        public int compareTo(Object o)
        {
            hazardPair h = (hazardPair)o;
            if ((hs == h.hs) &&
                (hd == h.hd) &&
                (es == h.es) &&
                (ed == h.ed))
                return 0;
            if (hs != h.hs)
                return (hs < h.hs ? -1 : 1);
            if (hd != h.hd)
                return (hd < h.hd ? -1 : 1);
            if (es != h.es)
                return (es < h.es ? -1 : 1);
            if (ed != h.ed)
                return (ed < h.ed ? -1 : 1);
            return 0;
        }
        public String toString()
        {
            return("Pair: " + hs + "/" + (es == -1 ? "*" : ""+es) + " to " +
                              hd + "/" + (ed == -1 ? "*" : ""+ed));
        }
    }
    private class randomHexside
    {
        private final char hexside;
        private final double prob;
        private double percent(double val)
        {
            if (val < 0.)
                return 0.;
            if (val > 100.)
                return 100.;
            return val;
        }
        randomHexside(char h, double p)
        {
            hexside = h;
            prob = percent(p);
        }
        char getHexside()
        {
            return hexside;
        }
        double getProb()
        {
            return prob;
        }
        public String toString()
        {
            return("Hexside " + hexside + " " + (prob < 100. ?
                                                 prob + " %" :
                                                 ""));
        }
    }
    private List findHazardPairBestMatch(hazardPair p)
    {
        hazardPair p2;
        List al;
        p2 = p;
        al = (List)hexsideRandomness.get(p2);
        if (al != null) // exact match
            return al;
        p2 = new hazardPair(p.hs, p.es, p.hd, -1);
        al = (List)hexsideRandomness.get(p2);
        if (al != null)
            return al;
        p2 = new hazardPair(p.hs, -1, p.hd, p.ed);
        al = (List)hexsideRandomness.get(p2);
        if (al != null)
            return al;
        p2 = new hazardPair(p.hs, -1, p.hd, -1);
        al = (List)hexsideRandomness.get(p2);
        if (al != null)
            return al;
        return null;
    }
    public void resolveAllHexsides(BattleHex h[][])
    {
        for (int i = 0; i < 6; i++)
        {
            for (int j = 0; j < 6; j++)
            {
                if (show[i][j])
                {
                    for (int k = 0; k < 6; k++)
                    {
                        BattleHex hd = h[i][j].getNeighbor(k);
                        if (hd != null)
                        {
                            char ts = h[i][j].getTerrain();
                            int  es = h[i][j].getElevation();
                            char td = hd.getTerrain();
                            int  ed = hd.getElevation();
                            hazardPair hp = new hazardPair(ts,es,td,ed);
                            List hsl = findHazardPairBestMatch(hp);
                            if (hsl != null)
                            {
                                boolean attributed = false;
                                Iterator it = hsl.iterator();
                                while (!attributed && it.hasNext())
                                {
                                    randomHexside rhs = (randomHexside)it.next();
                                    if ((rand.nextDouble() * 100.) <
                                        rhs.getProb())
                                    {
                                        attributed = true;
                                        h[i][j].setHexside(k,rhs.getHexside());
                                    }
                                }
                            }
                        }
                    }
                }
            }
        }
    }
}

PARSER_END(BattlelandRandomizerLoader)

SKIP :
{
        " "
  |     "\r"
  |     "\t"
}

TOKEN :
{
        < COMMENT : "#"(<NOTNEWLINE>)*"\r" | "#"(<NOTNEWLINE>)*"\n" >
|       < #NOTNEWLINE : ~["\n","\r"] >
}

String z_comment() :
{}
{
    <COMMENT>
    {
        return(new String(token.image));
    }
}

TOKEN :
{
    < EOL: "\n" >
|   < AREA : "AREA" >
|   < HAZARDS : "HAZARDS" >
|   < KEYLABEL : "LABEL" >
|   < SOMEOF : "SOMEOF" >
|   < SURROUNDINGSOF : "SURROUNDINGSOF" >
|   < PAIR : "PAIR" >
|   < HEXSIDES : "HEXSIDES" >
|   < LEFTOVER : "leftover" >
|   < USEDUP : "usedup" >
}

TOKEN :
{
    < NUMBER : (<DIGIT>)+ >
|   < FPNUMBER : (<DIGIT>)+<DOT>(<DIGIT>)* >
|   < #DIGIT : ["0" - "9"] >
|   < COMMA : "," >
|   < DOT : "." >
|   < OPENPAR : "(" >
|   < CLOSEPAR : ")" >
|   < CARET : "-" >
|   < EQUAL : "=" >
|   < STAR : "*" >
}

TOKEN :
{
    < CASELABEL : ["A"-"F","a"-"f"]["1"-"6"] >
|   < HAZARD : ["a"-"z","A"-"Z"] >

}

TOKEN :
{
    < USERLABEL : (["a"-"z"])+ >
}

String z_label() :
{}
{
    <USERLABEL>
    { return new String(token.image); }
}

char z_terrain() :
{}
{
    <HAZARD>
    { return(token.image.charAt(0)); }
}

int z_number() :
{}
{
    <NUMBER>
    { return(Integer.parseInt(token.image)); }
|   <STAR>
    { return((int)-1); }
}

double z_fpnumber() :
{}
{
    <FPNUMBER>
    { return(Double.parseDouble(token.image)); }
|   <STAR>
    { return((double)-1); }
}

address z_address() :
{
    int x,y;
    List al;
}
{
    <OPENPAR> (x = z_number()) <COMMA> (y = z_number()) <CLOSEPAR>
    {
        return new address(x,y);
    }
|   <CASELABEL>
    {
        switch (token.image.charAt(0))
        {
        case 'A':
        case 'a':
            x = 0;
            break;
        case 'B':
        case 'b':
            x = 1;
            break;
        case 'C':
        case 'c':
            x = 2;
            break;
        case 'D':
        case 'd':
            x = 3;
            break;
        case 'E':
        case 'e':
            x = 4;
            break;
        case 'F':
        case 'f':
            x = 5;
            break;
        default:
            throw new ParseException("Hex " + token.image + "doesn't exist");
        }
        y = 6 - Integer.parseInt(new String(token.image.substring(1)));
        int i = 5;
        while (!show[x][i])
        {
            y--;
            i--;
        }
        return new address(x,y);
    }
}

range z_range() :
{
    int a,b;
}
{
    (a = z_number()) <CARET> (b = z_number())
    { return new range(a,b); }
}

List z_listAddress() :
{
    address ad;
    List al, al2;
    int x,y;
    range r1, r2;
    int i,j;
    String s;
}
{
    <SOMEOF> <OPENPAR> (x = z_number()) <COMMA> (al2 = z_listAddress()) <CLOSEPAR> (al = z_listAddress())
    {
        List al3 = new ArrayList(al);
        while (!al2.isEmpty() && (x > 0))
        {
            ad = (address)al2.remove(rand.nextInt(al2.size()));
            al3.add(ad);
            x--;
        }
        return al3;
    }
|   <OPENPAR> <LEFTOVER> <CLOSEPAR> (al = z_listAddress())
    {
        List al3 = new ArrayList(al);
        if (leftover != null)
        {
            Iterator it = leftover.iterator();
            while (it.hasNext())
                al3.add(it.next());
        }
        return al3;
    }
|   <SURROUNDINGSOF> <OPENPAR> (al2 = z_listAddress()) <CLOSEPAR> (al = z_listAddress())
     {
        List al3 = new ArrayList(al);
        if (al2 != null)
        {
            Set  tempSet = new TreeSet();
            Iterator it = al2.iterator();
            while (it.hasNext())
            {
                ad = (address)it.next();
                for (i = 0; i < 6 ; i++)
                {
                    BattleHex hex = hexes[ad.x][ad.y].getNeighbor(i);
                    if (hex != null)
                    {
                        tempSet.add(new address(hex.getXCoord(),
                                                hex.getYCoord()));
                    }
                }
            }
            it = al2.iterator();
            while (it.hasNext())
            {
                ad = (address)it.next();
                tempSet.remove(ad);
            }
            it = tempSet.iterator();
            while (it.hasNext())
            {
                ad = (address)it.next();
                al3.add(ad);
            }
        }
        return al3;
    }
|   <OPENPAR> <USEDUP> <CLOSEPAR> (al = z_listAddress())
    {
        List al3 = new ArrayList(al);
        if (usedup != null)
        {
            Iterator it = usedup.iterator();
            while (it.hasNext())
                al3.add(it.next());
        }
        return al3;
    }
|   <OPENPAR> (s = z_label()) <CLOSEPAR> (al = z_listAddress())
    {
        List al3 = new ArrayList(al);
        List ll = (List)labels.get(s);
        if (ll != null)
        {
            Iterator it = ll.iterator();
            while (it.hasNext())
                al3.add(it.next());
        }
        return al3;
    }
|   (ad = z_address()) (al = z_listAddress())
    {
        if (exist(ad))
            al.add(ad);
        return(al);
    }
|   <OPENPAR> (r1 = z_range()) <COMMA> (y = z_number()) <CLOSEPAR> (al = z_listAddress())
    {
        for (i = r1.min ; i <= r1.max ; i++)
        {
            ad = new address(i,y);
            if (exist(ad))
                al.add(ad);
        }
        return al;
    }
|   <OPENPAR> (x = z_number()) <COMMA> (r2 = z_range()) <CLOSEPAR> (al = z_listAddress())
    {
        for (i = r2.min ; i <= r2.max ; i++)
        {
            ad = new address(x,i);
            if (exist(ad))
                al.add(ad);
        }
        return al;
    }
|   <OPENPAR> (r1 = z_range()) <COMMA> (r2 = z_range()) <CLOSEPAR> (al = z_listAddress())
    {
        for (i = r1.min ; i <= r1.max ; i++)
        for (j = r2.min ; j <= r2.max ; j++)
        {
            ad = new address(i,j);
            if (exist(ad))
                al.add(ad);
        }
        return al;
    }
|   /* empty */
    { return new ArrayList(); }
}

List z_listHazard() :
{
    char t;
    int e = 0;
    List tl;
    double p = 100.0,p1,p2,p3;
}
{
    (t = z_terrain()) (<COMMA> (p = z_fpnumber()))? <COMMA> (p1 = z_fpnumber()) <COMMA> (p2 = z_fpnumber()) <COMMA> (p3 = z_fpnumber()) (tl = z_listHazard())
    {
        randomHazard rt = new randomHazard(t, p, p1, p2, p3);
        tl.add(rt);
        return tl;
    }
|   (t = z_terrain()) (<COMMA> (p = z_fpnumber()))? (<COMMA> (e = z_number()))? (tl = z_listHazard())
    {
        randomHazard rt = new randomHazard(t, p, e);
        tl.add(rt);
        return tl;
    }
|   /* empty */
    { return new ArrayList(); }
}

List z_listHexside() :
{
    char t;
    int e = 0;
    List hl;
    double p = 100.0,p1,p2,p3;
}
{
    (t = z_terrain()) (<COMMA> (p = z_fpnumber()))? (hl = z_listHexside())
    {
        randomHexside rh = new randomHexside(t, p);
        hl.add(rh);
        return hl;
    }
|   /* empty */
    { return new ArrayList(); }
}

hazardPair z_hazardPair() :
{
    char ts, td;
    int  es, ed;
}
{
    <OPENPAR> (ts = z_terrain()) <COMMA> (es = z_number()) <CLOSEPAR> <OPENPAR> (td = z_terrain()) <COMMA> (ed = z_number()) <CLOSEPAR>
    {
        return new hazardPair(ts,es,td,ed);
    }
}

int oneArea(BattleHex h[][]) :
{
    List al;
    List tl;
    String s;
    hexes = h;
    hazardPair hp;
}
{
    <AREA> (al = z_listAddress()) <HAZARDS> (tl = z_listHazard())
    {
        Collections.sort(al);
        Collections.reverse(tl);
        //System.err.println("Using area: " + al + ", terrains: " + tl);
        resolveAll(h, al, tl);
        //System.err.println("Usedup: " + usedup);
        //System.err.println("Leftover: " + leftover);
        return(1);
    }
|   <KEYLABEL> (s = z_label()) <EQUAL> (al = z_listAddress())
    {
        labels.put(s, al);
        return(0);
    }
|   <PAIR> (hp = z_hazardPair()) <HEXSIDES> (tl = z_listHexside())
    {
        //System.out.println("For " + hp + " we'll use " + tl);
        Collections.reverse(tl);
        hexsideRandomness.put(hp,tl);
        //System.out.println("NOW: " + hexsideRandomness);
        return(0);
    }
|   <EOL>
    {
        return(0);
    }
|   (s = z_comment())
    {
        return(0);
    }
|   <EOF>
    {
        return(-1);
    }
}
