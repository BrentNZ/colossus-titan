options
{
  IGNORE_CASE = false;
  STATIC = false;
}

PARSER_BEGIN(VariantLoader)
package net.sf.colossus.parser;

import net.sf.colossus.util.Log;
import java.util.*;

/**
 * VariantLoader load the name of variant files fro a variant description.
 * @author Romain Dolbeau
 * @version $Id$
 */
public class VariantLoader
{
    public static final int MAP_INDEX = 0;
    public static final int CRE_INDEX = 1;
    public static final int TER_INDEX = 2;
    public static final int DEPEND_INDEX = 3;
}

PARSER_END(VariantLoader)

SKIP :
{
        " "
  |     "\r"
  |     "\t"
}

TOKEN :
{
        < COMMENT : "#"(<NOTNEWLINE>)*"\r" | "#"(<NOTNEWLINE>)*"\n" >
|       < #NOTNEWLINE : ~["\n","\r"] >
}

String v_comment() :
{}
{
    <COMMENT>
    {
        return(new String(token.image));
    }
}

TOKEN :
{
        < EOL: "\n" >
}

TOKEN :
{
    < CHAINE : (<CAR>)+ >
|   < #CAR : ["a"-"z","A"-"Z","0"-"9","_","-",".",","] >
}

String v_chaine() :
{}
{
    <CHAINE>
    {
        return(new String(token.image));
    }
}

void v_map(String[] ls) :
{
    String fn;
}
{
    "MAP:" (fn = v_chaine())
    { ls[MAP_INDEX] = fn; }
}

void v_cre(String[] ls) :
{
    String fn;
}
{
    "CRE:" (fn = v_chaine())
    { ls[CRE_INDEX] = fn; }
}

void v_ter(String[] ls) :
{
    String fn;
}
{
    "TER:" (fn = v_chaine())
    { ls[TER_INDEX] = fn; }
}

void v_depend(String[] ls) :
{
    String fn;
}
{
    "DEPEND:" (fn = v_chaine())
    { ls[DEPEND_INDEX] = fn; }
}

int oneLine(String[] ls) :
{
    String s;
}
{
    v_map(ls)      
    {
        return(1);
    }
|   v_cre(ls)      
    {
        return(1);
    }
|   v_ter(ls)      
    {
        return(1);
    }
|   v_depend(ls)      
    {
        return(1);
    }
|   <EOL>
    {
        return(0);
    }
|   (s = v_comment())
    {
        Log.debug("Found comment : " + s);
        return(0);
    }
|   <EOF>
    {
        return(-1);
    }
}
