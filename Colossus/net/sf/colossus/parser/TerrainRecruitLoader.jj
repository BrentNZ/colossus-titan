options
{
  IGNORE_CASE = false;
  STATIC = false;
}

PARSER_BEGIN(TerrainRecruitLoader)
package net.sf.colossus.parser;


import java.util.*;

import net.sf.colossus.util.Log;
import net.sf.colossus.util.HTMLColor;
import net.sf.colossus.server.Creature;


public class TerrainRecruitLoader
{
    Hashtable carToRecruits = new Hashtable();
    Hashtable carToName = new Hashtable();
    Hashtable carToColor = new Hashtable();
    public char[] terrains = null;

    class recruitNumber
    {
        public String name;
        public int number;
        public recruitNumber(String n, int i)
        {
            name = n; number = i;
        }
        public String toString()
        {
            return("(" + number + "," + name +")");
        }
    }
    public Creature[] getStartingCreatures()
    {
        Creature[] bc = new Creature[3];
        ArrayList to = getPossibleRecruits('T');
        bc[0] = (Creature)to.get(0);
        bc[1] = (Creature)to.get(1);
        bc[2] = (Creature)to.get(2);
        return(bc);
    }
    public String getTerrainName(char tc)
    {
        return((String)carToName.get(new Character(tc)));
    }
    public java.awt.Color getTerrainColor(char tc)
    {
        return((java.awt.Color)carToColor.get(new Character(tc)));
    }
    public ArrayList getPossibleRecruits(char terrain)
    {
        ArrayList al = (ArrayList)carToRecruits.get(new Character(terrain));
        ArrayList re = new ArrayList();
        for (int i = 0; i < al.size() ; i++)
        {
            recruitNumber tr = (recruitNumber)al.get(i);
            if (tr.number > 0)
            {
                re.add(Creature.getCreatureByName(tr.name));
            }
        }
        return(re);
    }
    public int numberOfRecruiterNeeded(Creature recruiter, Creature recruit, char terrain)
    {
        if (terrain != 'T') /* handle Tower with care */
        {
            ArrayList al = (ArrayList)carToRecruits.get(new Character(terrain));
            ArrayList pc = getPossibleRecruits(terrain);

            int iReer = pc.indexOf(recruiter);
            int iRe = pc.indexOf(recruit);
            if ((iReer == -1) || (iRe == -1))
            {
                return 99; /* can't recruit/be recruited here */
            }

            if (iReer >= iRe)
            {
                return 1; /* only one to recruit same or below */
            }

            if ((iReer+1) < iRe)
            {
                return 99; /* can't recruit 2 above */
            }

            return (((recruitNumber)al.get(iRe)).number);
        }
        /* Tower, special */
        ArrayList to = getPossibleRecruits(terrain); /* this is 'T' */
        if (recruit.getName().equals(((Creature)to.get(0)).getName()) ||
                    recruit.getName().equals(((Creature)to.get(1)).getName()) ||
                    recruit.getName().equals(((Creature)to.get(2)).getName()))
        { /* first three can be recruited by anything */
            return 0;
        } 
        else if (recruit.getName().equals(((Creature)to.get(4)).getName()))
        {
            if (recruiter.getName().equals("Titan") ||
                recruiter.getName().equals(((Creature)to.get(4)).getName()))
            { /* fifth recruited by Titan or itself */
                return 1;
            } 
            else 
            {
                return 99;
            }
        } 
        else if (recruit.getName().equals(((Creature)to.get(3)).getName()))
        { /* fourth recruited by any 3 or itself */
            if (recruiter.getName().equals(((Creature)to.get(3)).getName()))
            {
                return 1;
            } 
            else 
            {
                return 3;
            }
        } 
        else 
        {
            return 99;
        }
    }
}

PARSER_END(TerrainRecruitLoader)

SKIP :
{
    " "
  | "\r"
  | "\t"
}

TOKEN :
{
    < EOL: "\n" >
}

TOKEN :
{
    < NUMBER : (<DIGIT>)+ >
|   < #DIGIT : ["0" - "9"] >
}

TOKEN :
{
    < TERCAR : ["a"-"z","A"-"Z"] >
}

TOKEN :
{
    < CHAINE : (<CAR>)+ >
|   < #CAR : ["a"-"z","A"-"Z"] >
}

char r_char() :
{}
{
    <TERCAR>
    { return (token.image.charAt(0)); }
}

String r_chaine() :
{}
{
    <CHAINE>
    {
        return(new String(token.image));
    }
}

int r_number() :
{}
{
    <NUMBER>
    {
        return(Integer.parseInt(token.image));
    }
}

ArrayList r_allRecruit() :
{
    ArrayList temp;
    int i;
    String n;
}
{
    (i = r_number()) (n = r_chaine()) (temp = r_allRecruit())
    { temp.add(0, new recruitNumber(n, i)); return temp; }
|   /* empty */
    { return new ArrayList(); }

}

int oneTerrain() :
{
    String t;
    String col;
    char tc;
    ArrayList rl;
}
{
    (tc = r_char()) (col = r_chaine()) (t = r_chaine()) (rl = r_allRecruit()) <EOL>
    {
        carToRecruits.put(new Character(tc), rl);
        carToName.put(new Character (tc), t);
        carToColor.put(new Character (tc), HTMLColor.stringToColor(col));
        if (terrains == null)
        {
            terrains = new char[1];
            terrains[0] = tc;
        } else {
            char[] t2 = new char[terrains.length + 1];
            for (int i = 0; i < terrains.length ; i++)
                t2[i] = terrains[i];
            t2[terrains.length] = tc;
            terrains = t2;
        }
        Log.debug("Adding recruits for " + t + " " + rl);
        return(1);
    }
|   <EOL>
    {
        return(0);
    }
|   <EOF>
    {
        return(-1);
    }
}
