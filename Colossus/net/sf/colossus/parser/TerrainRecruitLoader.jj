options
{
  IGNORE_CASE = false;
  STATIC = false;
}

PARSER_BEGIN(TerrainRecruitLoader)
package net.sf.colossus.parser;


import java.util.*;

import net.sf.colossus.util.Log;
import net.sf.colossus.util.HTMLColor;
import net.sf.colossus.server.Creature;

/**
 * TerrainRecruitLoader load the terrains and recruits descriptions.
 * @author Romain Dolbeau
 * @version $Id$
 * @see net.sf.colossus.server.Creature
 */
public class TerrainRecruitLoader
{
    /**
     * Map a character (representing a terrain) to a list of recruits.
     */
    Hashtable carToRecruits = new Hashtable();
    /**
     * Map a character (representing a terrain) to a terrain name.
     */
    Hashtable carToName = new Hashtable();
    /**
     * Map a character (representing a terrain) to a terrain display name.
     */
    Hashtable carToDisplayName = new Hashtable();
    /**
     * Map a character (representing a terrain) to a terrain color.
     */
    Hashtable carToColor = new Hashtable();
    /**
     * Map a character (representing a terrain) to a boolean, telling if a Creature can recruit in the usual way or not.
     */
    Hashtable carToBelow = new Hashtable();
    /**
     * All the character that are valid terrains.
     */
    private char[] terrains = null;
    /**
     * The list of Acquirable Creature, as acquirableData
     * @see net.sf.colossus.parser.TerrainRecruitLoader.acquirableData
     */
    private List acquirableList = null;

    /**
     * Return an array of all the char representing a valid terrain.
     * @return An array of char, each representing a valid terrain.
     */
    public char[] getTerrains()
    {
        return (char [])terrains.clone();
    }

    /**
     * Used internally to associate a creature name and the number of creatures needed to recruit it.
     * @author Romain Dolbeau
     * @version $Id$
     */
    private class recruitNumber
    {
        /**
         * Name of the creature
         */
        private final String name;
        /**
         * Number of creatures needed to recruit it, depend on the terrain.
         */
        private final int number;
        /**
         * @param n Name of the creature
         * @param i Number of creatures needed to recruit it in the terrain considered.
         */
        public recruitNumber(String n, int i)
        {
            name = n; number = i;
        }
        String getName()
        {
            return name;
        }
        int getNumber()
        {
            return number;
        }
        /**
         * Textual representation of the data.
         * @return Textual representation of the data as a String.
         */
        public String toString()
        {
            return("(" + number + "," + name +")");
        }
    }
    /**
     * Give an array of the starting creatures, those available in the first turn and in the tower.
     * @return an array of Creature representing the starting creatures.
     * @see net.sf.colossus.server.Creature
     */
    public Creature[] getStartingCreatures()
    {
        Creature[] bc = new Creature[3];
        java.util.List to = getPossibleRecruits('T');
        bc[0] = (Creature)to.get(0);
        bc[1] = (Creature)to.get(1);
        bc[2] = (Creature)to.get(2);
        return(bc);
    }
    /**
     * Give the name of the terrain.
     * @param tc Character representing a terrain.
     * @return The name of the terrain as a String.
     */
    public String getTerrainName(char tc)
    {
        return((String)carToName.get(new Character(tc)));
    }
    /**
     * Give the display name of the terrain.
     * @param tc Character representing a terrain.
     * @return The display name of the terrain as a String.
     */
    public String getTerrainDisplayName(char tc)
    {
        return((String)carToDisplayName.get(new Character(tc)));
    }
    /**
     * Give the color of the terrain.
     * @param tc Character representing a terrain.
     * @return The color of the terrain as Color.
     */
    public java.awt.Color getTerrainColor(char tc)
    {
        return((java.awt.Color)carToColor.get(new Character(tc)));
    }
    /**
     * Give a modifiable list of the possible recruits in a terrain.
     * @param terrain Character representing a terrain.
     * @return List of Creatures that can be recruited in the terrain.
     * @see net.sf.colossus.server.Creature
     */
    public java.util.List getPossibleRecruits(char terrain)
    {
        ArrayList al = (ArrayList)carToRecruits.get(new Character(terrain));
        ArrayList re = new ArrayList();
        Iterator it = al.iterator();
        while (it.hasNext())
        {
            recruitNumber tr = (recruitNumber)it.next();
            if ((tr.getNumber() >= 0) && !(tr.getName().equals("Anything"))
                                      && !(tr.getName().equals("AnyNonLord"))
                                      && !(tr.getName().equals("Titan"))
                                      && !(tr.getName().equals("Lord")))
            {
                re.add(Creature.getCreatureByName(tr.getName()));
            }
        }
        return(re);
    }
    /**
     * Give a modifiable list of the possible recruiters in a terrain.
     * @param terrain Character representing a terrain.
     * @return List of Creatures that can recruit in the terrain.
     * @see net.sf.colossus.server.Creature
     */
    public java.util.List getPossibleRecruiters(char terrain)
    {
        ArrayList al = (ArrayList)carToRecruits.get(new Character(terrain));
        ArrayList re = new ArrayList();
        Iterator it = al.iterator();
        while (it.hasNext())
        {
            recruitNumber tr = (recruitNumber)it.next();
            if (!(tr.getName().equals("Anything")) &&
                !(tr.getName().equals("AnyNonLord")) &&
                !(tr.getName().equals("Lord")))
            {
                re.add(Creature.getCreatureByName(tr.getName()));
            }
            else
            {
                if (tr.getName().equals("Anything"))
                { // anyone can recruit here...
                    java.util.List creatures = Creature.getCreatures();
                    return(new ArrayList(creatures));
                }
                if (tr.getName().equals("AnyNonLord"))
                { // anyone can recruit here...
                    java.util.List creatures = Creature.getCreatures();
                    return(new ArrayList(creatures));
                }
                if (tr.getName().equals("Lord"))
                {
                    java.util.List potential = Creature.getCreatures();
                    ListIterator lit = potential.listIterator();
                    while (lit.hasNext())
                    {
                        Creature creature = (Creature)lit.next();
                        if (creature.isLord())
                        {
                            re.add(creature);
                        }
                    }
                }

            }
        }
        return(re);
    }
    /**
     * Give a modifiable list of all the possible recruiters in a terrain, including the 'Fake' ones.
     * @param terrain Character representing a terrain.
     * @return List of Creatures that can recruit in the terrain, including the 'Fake' ones.
     * @see net.sf.colossus.server.Creature
     */
    private java.util.List getPossibleFakeRecruiters(char terrain)
    {
        ArrayList al = (ArrayList)carToRecruits.get(new Character(terrain));
        ArrayList re = new ArrayList();
        Iterator it = al.iterator();
        while (it.hasNext())
        {
            recruitNumber tr = (recruitNumber)it.next();
            if (!(tr.getName().equals("Anything")) &&
                !(tr.getName().equals("AnyNonLord")) &&
                !(tr.getName().equals("Lord")))
            {
                re.add(Creature.getCreatureByName(tr.getName()));
            }
            else
            {
                re.add(Creature.unknown);
            }
        }
        return re;
    }

    /**
     * Give the number of a given recruiters needed to recruit a given Creature.
     * @param recruiter The Creature that wish to recruit.
     * @param recruit The Creature that is to be recruited.
     * @param terrain Character representing a terrain, in which the recruiting occurs.
     * @return Number of recruiter needed.
     * @see net.sf.colossus.server.Creature
     */
    public int numberOfRecruiterNeeded(Creature recruiter, Creature recruit, char terrain)
    {
        ArrayList al = (ArrayList)carToRecruits.get(new Character(terrain));
        java.util.List pc = getPossibleRecruits(terrain);
        java.util.List pr = getPossibleFakeRecruiters(terrain);
        boolean regularRecruit = ((Boolean)carToBelow.get(
                       new Character(terrain))).booleanValue();
        int iReer = pc.indexOf(recruiter);
        int iRe = pc.indexOf(recruit);
        int iReerFake = pr.indexOf(recruiter);
        int iReFake = pr.indexOf(recruit);

        // find out what's below the recruit in the recruiters stack
        String below = iReFake > 0 ?    
            ((recruitNumber)al.get(iReFake - 1)).getName() : "empty";
        
        if (iRe == -1)
        { // can't be recruited here
            return 99;
        }
        if (iReer == iRe)
        { // only one to recruit same, except if it is a 0-type recruit.
            int num = (((recruitNumber)al.get(iReFake)).getNumber());
            if (num > 0)
                return 1;
            else
                return 0;
        }
        if ((iReer > iRe) && regularRecruit)
        { // only one to recruit below if possible, except if it is a 0-type recruit.
            int num = (((recruitNumber)al.get(iReFake)).getNumber());
            if (num > 0)
                return 1;
            else
                return 0;
        }
        if ((iReer != -1) && ((iReer+1) == iRe) && regularRecruit)
        { // regular recruitments if possible
            return (((recruitNumber)al.get(iReFake)).getNumber());
        }
        if ((iReer == -1) && (iRe != -1) &&
            ((iReerFake+1) == iReFake) && regularRecruit)
        { // regular recruitments if possible, with a non-recruitable recruiter
            return (((recruitNumber)al.get(iReFake)).getNumber());
        }
        if (iReFake == 0)
        { // first in stack, itself only (taken care of above)
            return 99;
        }

        // First, "Anything" ; the number is needed no matter what
        // the recruiter is
        if (below.equals("Anything"))
            return (((recruitNumber)al.get(iReFake)).getNumber());
        // second, "AnyNonLord" ; the number is needed no matter what
        // the recruiter is
        if (below.equals("AnyNonLord") && !recruiter.isImmortal())
            return (((recruitNumber)al.get(iReFake)).getNumber());
        // Third, "Lord" ; only one Lord can recruit
        if (below.equals("Lord") && (recruiter.isLord()))
            return 1;
        // Third, "Titan" ; only the Titan can recruit
        if (below.equals("Titan") && (recruiter.isTitan()))
            return 1;
        // not possible to recruit, after all
        return 99;
    }

    /**
     * Used internally to record the Acquirable name, points needed for recruitment, and the list of terrains in which the Acquirable dwells.
     * @author Romain Dolbeau
     * @version $Id$
     */
    private class acquirableData
    {
        private final String name;
        private final int value;
        private final List where;
        acquirableData(String n, int v)
        {
            name = n;
            value = v;
            where = new ArrayList();
        }
        String getName()
        {
            return name;
        }
        int getValue()
        {
            return value;
        }
        void addTerrain(char t)
        {
            where.add(new Character(t));
        }
        /**
         * Tell if the Acquirable can be Acquired in the terrain.
         * @param t The terrain in which the Acquirements occurs.
         * @return True if the Acquirable can be acquired here, false otherwise.
         */
        boolean isAvailable(char t)
        {
            if (where.isEmpty() ||
                ((where.indexOf(new Character(t))) != -1))
            {
                return true;
            }
            else
            {
                return false;
            }
        }
        public String toString()
        {
            return("Acquirable by name of " + name +
                   ", available every " + value +
                   (where.isEmpty() ? "" : ", in terrain " + where));
        }
    }

    private void addAcquirable(acquirableData ad) throws ParseException
    {
        if (acquirableList == null)
        {
            acquirableList = new ArrayList();
        }
        acquirableList.add(ad);
        if ((ad.getValue() % getAcquirableRecruitmentsValue()) != 0)
        {
            throw new ParseException("Wrong Value for an Acquirable : " +
                                     ad + " ; should multiple of " +
                                     getAcquirableRecruitmentsValue());
        }
    }

    /**
     * To obtain all the Creature that can be Acquired.
     * @return The list of name (as String) that can be Acquired
     */
    public List getAcquirableList()
    {
        List al = new ArrayList();
        Iterator it = acquirableList.iterator();
        while (it.hasNext())
        {
            acquirableData ad = (acquirableData)it.next();
            al.add(ad.getName());
        }
        return al;
    }

    /**
     * To obtain the base amount of points needed for Acquirement.
     * All Acquirements must occur at even multiple of this.
     * @return The base amount of points needed for Acquirement.
     */
    public int getAcquirableRecruitmentsValue()
    {
        acquirableData ad = (acquirableData)acquirableList.get(0);
        return ad.getValue();
    }

    /**
     * To obtain the first Acquirable (aka 'primary') Creature name.
     * This one is the starting Lord with the Titan.
     * @return The name of the primary Acquirable Creature.
     */
    public String getPrimaryAcquirable()
    {
        acquirableData ad = (acquirableData)acquirableList.get(0);
        return ad.getName();
    }

    /**
     * To obtain all the Creature that can be acquired at the given amount of points in the given terrain.
     * @param t The Terrain in which the recruitement occurs.
     * @param value The number of points at which the recruitement occurs. Valid values are constrained.
     * @return The list of name (as String) that can be acquired in this terrain, for this amount of points.
     * @see #getAcquirableRecruitmentsValue()
     */
    public List getRecruitableAcquirableList(char t, int value)
    {
        List al = new ArrayList();
        if ((value % getAcquirableRecruitmentsValue()) != 0)
        {
            return al;
        }
        Iterator it = acquirableList.iterator();
        while (it.hasNext())
        {
            acquirableData ad = (acquirableData)it.next();
            if (ad.isAvailable(t) && ((value % ad.getValue()) == 0))
            {
                al.add(ad.getName());
            }
        }
        return al;
    }

    /**
     * Check if the Creature whose name is in parameter is an Acquirable creature or not.
     * @param name The name of the Creature inquired.
     * @return If the creature is Acquirable.
     */
    public boolean isAcquirable(String name)
    {
        Iterator it = acquirableList.iterator();
        while (it.hasNext())
        {
            acquirableData ad = (acquirableData)it.next();
            if (name.equals(ad.getName()))
            {
                return true;
            }
        }
        return false;
    }

    /**
     * Check if the Creature in parameter is an Acquirable creature or not.
     * @param c The Creature inquired.
     * @return If the creature is Acquirable.
     */
    public boolean isAcquirable(Creature c)
    {
        return isAcquirable(c.getName());
    }

    /** Base amount of points needed for Titan improvement. */
    int titanImprove = 100;
    /** Amount of points needed for Titan Teleport. */
    int titanTeleport = 400;

    /**
     * To obtain the base amount of points needed for Titan improvement.
     * @return The base amount of points needed for Titan improvement.
     */
    public int getTitanImprovementValue()
    {
        return titanImprove;
    }

    /**
     * To obtain the amount of points needed for Titan Teleport.
     * @return The amount of points needed for Titan Teleport.
     */
    public int getTitanTeleportValue()
    {
        return titanTeleport;
    }
}

PARSER_END(TerrainRecruitLoader)

SKIP :
{
    " "
  | "\r"
  | "\t"
}

TOKEN :
{
        < COMMENT : "#"(<NOTNEWLINE>)*"\r" | "#"(<NOTNEWLINE>)*"\n" >
|       < #NOTNEWLINE : ~["\n","\r"] >
}

String r_comment() :
{}
{
    <COMMENT>
    {
        return(new String(token.image));
    }
}

TOKEN :
{
    < EOL: "\n" >
}

TOKEN :
{
    < ACQUIRABLE : "ACQUIRABLE" >
|   < TITANIMPROVE : "TITANIMPROVE" >
|   < TITANTELEPORT : "TITANTELEPORT" >
}

TOKEN :
{
    < NUMBER : ("-")?(<DIGIT>)+ >
|   < #DIGIT : ["0" - "9"] >
}

TOKEN :
{
    < BOOL: "true"|"false" >
}

TOKEN:
{
    < TERRAINLIST : (<TERCAR><COMMA>)*<TERCAR> >
|   < #TERCAR : ["a"-"z","A"-"Z"] >
|   < #COMMA : "," >
}

TOKEN :
{
    < CHAINE : (<CAR>)+ >
|   < #CAR : ["a"-"z","A"-"Z"] >
}

boolean r_bool() :
{}
{
    <BOOL>
    { if (token.image.equals("true")) return true; else return false; }
}

char r_char() :
{}
{
    <TERRAINLIST>
    { return (token.image.charAt(0)); }
}

String r_chaine() :
{}
{
    <CHAINE>
    {
        return(new String(token.image));
    }
}

String r_terrainList() :
{}
{
    <TERRAINLIST>
    {
        return(new String(token.image));
    }
}

acquirableData r_acquirableData() :
{
    String name;
    int value;
    String tl = null;
}
{
    (value = r_number()) (name = r_chaine()) (tl = r_terrainList())?
    {
        acquirableData ad = new acquirableData(name, value);
        if (tl != null)
        {
        List li = net.sf.colossus.util.Split.split(',',tl);
        Iterator it = li.iterator();
        while (it.hasNext())
        {
            String ter = (String)it.next();
            char t = ter.charAt(0);
            ad.addTerrain(t);
        }
        }
        return ad;
    }
}

int r_number() :
{}
{
    <NUMBER>
    {
        return(Integer.parseInt(token.image));
    }
}

ArrayList r_allRecruit() :
{
    ArrayList temp;
    int i;
    String n;
}
{
    (i = r_number()) (n = r_chaine()) (temp = r_allRecruit())
    { temp.add(0, new recruitNumber(n, i)); return temp; }
|   /* empty */
    { return new ArrayList(); }

}

List r_acquirableDataList() :
{
    acquirableData ad;
    List temp;
}
{
    (ad = r_acquirableData()) (temp = r_acquirableDataList())
    {
        temp.add(ad);
        return temp;
    }
|   /* empty */
    { return new ArrayList(); }
}

/**
 * Load a terrain and the recruit possibility in this terrain.
 * @return Status of the parser ; negative at the end of file, positive on success, null on blank line.
 */
int oneTerrain() :
{
    String t, dt = null;
    String col;
    char tc;
    ArrayList rl;
    String s;
    boolean rb;
    List al;
    int val;
}
{
    (tc = r_char()) (col = r_chaine()) (t = r_chaine())
        (rb = r_bool()) (rl = r_allRecruit()) (dt = r_chaine())?
    {
        carToRecruits.put(new Character(tc), rl);
        carToName.put(new Character (tc), t);
        carToDisplayName.put(new Character (tc), dt == null ? t : dt);
        carToColor.put(new Character (tc), HTMLColor.stringToColor(col));
        carToBelow.put(new Character (tc), new Boolean (rb));
        if (terrains == null)
        {
            terrains = new char[1];
            terrains[0] = tc;
        } 
        else 
        {
            char[] t2 = new char[terrains.length + 1];
            for (int i = 0; i < terrains.length ; i++)
            {
                t2[i] = terrains[i];
            }
            t2[terrains.length] = tc;
            terrains = t2;
        }
        Log.debug("Adding recruits for " + t + " " + rl);
        return(1);
    }
|   <EOL>
    {
        return(0);
    }
|   (s = r_comment())
    {
        Log.debug("Found comment : " + s);
        return(0);
    }
|   <ACQUIRABLE> (al = r_acquirableDataList())
    {
        ListIterator it = al.listIterator(al.size());
        while (it.hasPrevious())
        {
            acquirableData ad = (acquirableData)it.previous();
            addAcquirable(ad);
        }
        Log.debug("Using Acquirable List : " + acquirableList);
        return(0);
    }
|   <TITANIMPROVE> (val = r_number())
    {
        if (val > 0)
            titanImprove = val;
        else
        {
            throw new ParseException("Wrong Value for Titan Improvement : "
                                     + val);
        }
        return(0);
    }
|   <TITANTELEPORT> (val = r_number())
    {
        if (val > 0)
            titanTeleport = val;
        else
        {
            throw new ParseException("Wrong Value for Titan Teleport : "
                                     + val);
        }
        return(0);
    }
|   <EOF>
    {
        return(-1);
    }
}
