Coding standards for Colossus:

1. Do not put tab characters in code, period.  Use spaces only.
There is no standard tab stop in Java, so tabs will look bad for
anyone whose editor is set up differently than that of the person
who put tabs in the code.  Configure your editor to emit the
appropriate number of spaces rather than a hard tab when you hit
the tab key.  (Of course, Makefiles are an exception, because you
have to use tabs there.  Which is almost enough of a reason to
switch to Ant.)

2. Wrap code at 79 characters.  This is a pain sometimes, but it
allows easly working with the code using 80-column editor and
terminal windows.  (Remember, code is not just viewed through
your favorite editor in your favorite GUI desktop.  It's also
emailed around, diffed, viewed in debugger windows, fiddled with
on remove servers through network connections, etc.)

3. Put opening braces at the beginning of a new line rather than
the end of the previous line.  This decision has been argued for
decades and will never be settled (at least not until all language
designers follow Python's lead and just ditch the braces), but
consistency within a project is more important than personal
preference.

4. Colossus currently compiles and runs under JDK 1.2.  Try to
keep it that way.  At some point we might decide to bump the JDK
version requirement for a truly great feature (e.g. templated
container classes), but don't do it trivially. 

5. Try not to use public member variables, except for constants.
Use a private variable and public get/set methods.  (But don't
automatically add an accessor and mutator for every variable,
just for the ones that actually need them.)  This adds some
overhead up front but makes it easier to refactor code later.

6. Try to comment stuff, at least at the public method level for
non-trivial methods.  But there's no need to go overboard
commenting obvious stuff.  Javadoc comments are preferable to
regular comments for whole methods and important member variables.

7. The game started out in the default package for simplicity.
It's being gradually moved to sub-packages within net.sf.colossus,
for the client/server split.  Where to put new code, and when to
move code into a package, is a judgment call.  Err on the side of
caution when moving existing code around, because moving files
wreaks havoc on CVS history.  Stick to public and private in the
default package.  Use package private only within explicit packages
when it really makes logical sense because the packages are actually
coherent units rather than just piles of code that happen to share
a directory.  (In the long run many public methods should become
package private, but there's no hurry.)  When you create new
packages, make sure to fix the appropriate spots in the Makefile
and test that the program still works from the executable jar file,
not just from the full code tree.

8. Some methods are private because they're not used outside of
their class, not necessarily because they shouldn't be used
outside of their class.  Some classes are final because they're
not currently subclassed, not because they should never be
subclassed.  These are optimizations for both programmers (who
don't need to check to see if other classes call / override
something before changing it if it's tagged private / final) and
for the JVM, not necessarily design statements.  So feel free
to change such things as necessary, until the interfaces are
finalized and polished and other people depend upon them.

9. Always do a cvs diff before you check code in.  That way
if your editor accidentally changed a bunch of spaces to tabs,
or changed every CR to a CR/LF, or the broken change you thought
you took out somehow got back in, you'll know.  And you'll also
be able to write a better check-in comment because you won't
forget about that other change you made yesterday.

10. Fully brace conditionals, even if the clause is only one line
and doesn't technically need braces.  This makes the code taller,
but easier to read and change.

11. Otherwise just try to follow the existing format.  A foolish
consistency may be the hobgoblin of little minds, but it sure
makes code easier to read.

Thanks for reading this.
