Colossus networked multiplayer design

Goal:

Break a working single-JVM program into two separate programs, while keeping
it running during the transition.


Requirements:

1. Untrusted clients.

If the player is not supposed to see something, then his client must not
have access to it.  All die rolls must be generated on the server.  All
moves made by a client must be verified for legality by the server.

2. Servers must be easy for anyone to run, with no expensive or hard to
install containers.  That rules out CORBA and EJB designs.

2. Must interoperate with clients and servers written in other languages.

No EJBs, no RMI, no remote serialization.


Solution:

A simple string socket protocol like the one in protocol.txt


Ramifications:

1. All method calls crossing the Client/Server boundary should be void.

2. All parameters to these method calls should be stringified.  Obviously
object references won't be valid on the other side of a socket interface.


Implementation stages:

1. Add Client and Server proxy classes.  Route all method calls that
will cross the eventual network through them.

2. Split the game into packages, so that we can use package private to
help enforce that rule.

3. Turn non-void remote methods into void methods with callbacks.

4. Have the client and server cache information from the other side,
to avoid constant redundant requests for information.

5. Add lots of error checking on the server side, assuming a hostile client.

6. Eliminate reliance on statics.  Have the server send copies of game data 
to the clients as needed.

7. Add stringifying and destringifying logic for parameters.  This layer
should be pluggable.

8. Redo initialization logic so that the client and server run in separate
JVMs.

9. Add socket code.  (Pluggable.)

10. Add retry logic to re-prompt clients that don't respond quickly enough.

11. Add client replacement logic to handle dropped clients.

12. Move AI to client side, to simplify the server, eliminate a major testing
path, and guarantee that AIs can't cheat.

